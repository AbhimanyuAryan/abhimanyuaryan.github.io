[{"_path":"/multi-agents/1-wth-are-agents","_dir":"multi-agents","_draft":false,"_partial":false,"_locale":"","title":"WTH are agents","description":"An agent is a computer program or an entity that is capable of acting autonomously in an environment to meet its designed objectives","date":"2024-02-27","author":"Aryan","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"introduction-to-agents"},"children":[{"type":"text","value":"Introduction to Agents"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An agent is a computer program or an entity that is capable of acting autonomously in an environment to meet its designed objectives"}]},{"type":"element","tag":"h3","props":{"id":"setting-up-openfire"},"children":[{"type":"text","value":"Setting up openfire"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Download and install Java JDK"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Downloading openfire: "},{"type":"element","tag":"a","props":{"href":"https://www.igniterealtime.org/downloads/#openfire","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.igniterealtime.org/downloads/#openfire"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Install spade inside conda: "},{"type":"element","tag":"a","props":{"href":"https://spade-mas.readthedocs.io/en/latest/installation.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://spade-mas.readthedocs.io/en/latest/installation.html"}]}]}]},{"type":"element","tag":"h4","props":{"id":"spade-agents-model-behavior"},"children":[{"type":"text","value":"Spade Agents Model - Behavior"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"OneShotBehaviour and TimeoutBehaviour"}]},{"type":"text","value":": These behaviors are designed for tasks that are executed just once or tasks that have a specific time limit for execution. They are useful for implementing actions that do not need to be repeated, such as sending a single message or performing a one-time computation."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"PeriodicBehaviour and CyclicBehaviour"}]},{"type":"text","value":": These are used for tasks that need to be performed repeatedly. While "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"PeriodicBehaviour"}]},{"type":"text","value":" allows for the execution of tasks at regular intervals, "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CyclicBehaviour"}]},{"type":"text","value":" is intended for continuous repetition of tasks without any delay between iterations. These behaviors are ideal for monitoring activities or continuously checking for new data or messages."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"Finite State Machine (FSMBehaviour)"}]},{"type":"text","value":": This behavior is applied to more complex scenarios where the task involves multiple states and transitions. A finite state machine can be used to model sophisticated behaviors that depend on the current state of the agent and its environment, allowing for decision-making processes that can adapt based on previous actions and external conditions."}]}]},{"type":"element","tag":"h4","props":{"id":"spade-code-overview"},"children":[{"type":"text","value":"Spade code overview"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"Agent Class (spade.agent.Agent)"}]}]}]},{"type":"element","tag":"h4","props":{"id":"writing-simple-agent-with-spade"},"children":[{"type":"text","value":"Writing Simple Agent with spade"}]},{"type":"element","tag":"pre","props":{"className":["language-python"],"code":"from spade.agent import Agent\nfrom spade.behaviour import CyclicBehaviour\nfrom spade.message import Message\n\nclass SenderAgent(Agent):\n    class InformBehav(CyclicBehaviour):\n        async def run(self):\n            print(\"Sending a message...\")\n            msg = Message(to=\"receiver@yourserver.com\")  # Change to the receiver's JID\n            msg.set_metadata(\"performative\", \"inform\")  # Set the type of message\n            msg.body = \"Hello, this is a greeting from the sender agent.\"\n\n            await self.send(msg)\n            print(\"Message sent!\")\n\n    async def setup(self):\n        print(\"Sender Agent started\")\n        self.add_behaviour(self.InformBehav())\n\n# Create the agent\nsender = SenderAgent(\"sender@yourserver.com\", \"senderpassword\")  # Change to your sender agent's JID and password\nsender.start()\n\n# Stop the agent after some time\nimport time\ntime.sleep(10)  # Waits for 10 seconds\nsender.stop()\n","language":"python","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"from spade.agent import Agent\nfrom spade.behaviour import CyclicBehaviour\nfrom spade.message import Message\n\nclass SenderAgent(Agent):\n    class InformBehav(CyclicBehaviour):\n        async def run(self):\n            print(\"Sending a message...\")\n            msg = Message(to=\"receiver@yourserver.com\")  # Change to the receiver's JID\n            msg.set_metadata(\"performative\", \"inform\")  # Set the type of message\n            msg.body = \"Hello, this is a greeting from the sender agent.\"\n\n            await self.send(msg)\n            print(\"Message sent!\")\n\n    async def setup(self):\n        print(\"Sender Agent started\")\n        self.add_behaviour(self.InformBehav())\n\n# Create the agent\nsender = SenderAgent(\"sender@yourserver.com\", \"senderpassword\")  # Change to your sender agent's JID and password\nsender.start()\n\n# Stop the agent after some time\nimport time\ntime.sleep(10)  # Waits for 10 seconds\nsender.stop()\n"}]}]},{"type":"element","tag":"h4","props":{"id":"lifecycle-of-this-program"},"children":[{"type":"text","value":"Lifecycle of this program"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"Initialization"}]},{"type":"text","value":": When a behavior is added to an agent, it's initialized with any necessary setup parameters. This is where you can prepare the behavior for execution, such as configuring initial states or loading resources."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"Start"}]},{"type":"text","value":": The behavior is started either immediately when the agent starts or later, based on conditions or events. The starting of a behavior might involve preliminary actions before entering its main execution loop."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"run"}]},{"type":"text","value":": "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"run"}]},{"type":"text","value":" is called repeatedly based on the behavior"}]}]},{"type":"element","tag":"h3","props":{"id":"project-startup-for-macos"},"children":[{"type":"text","value":"Project startup for (macos)"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"starting openfire"}]}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"$ sudo su\nsh-3.2# cd /usr/local/openfire/bin\nsh-3.2# export JAVA_HOME=/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Home\nsh-3.2# ./openfire.sh\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ sudo su\nsh-3.2# cd /usr/local/openfire/bin\nsh-3.2# export JAVA_HOME=/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Home\nsh-3.2# ./openfire.sh\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"setting-up-openfire","depth":3,"text":"Setting up openfire"},{"id":"project-startup-for-macos","depth":3,"text":"Project startup for (macos)"}]}},"_type":"markdown","_id":"content:multi-agents:1-wth-are-agents.md","_source":"content","_file":"multi-agents/1-wth-are-agents.md","_extension":"md"},{"_path":"/multi-agents/2-genetic-algorithm","_dir":"multi-agents","_draft":false,"_partial":false,"_locale":"","title":"Genetic Algorithm","description":"","date":"2024-02-27","author":"Aryan","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"genetic-algorithm-and-its-implementation-in-python"},"children":[{"type":"text","value":"Genetic Algorithm and it's implementation in Python"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The algorithm begins by creating random population"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Thea algorithm then creates a sequence of new populations. A each step, the algorithm uses the individuals in current generation to create the next population. To create a new population, the algorithm performs the following steps:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Score each member of the current population by computing its fitness value. The values are called the raw fitness scores"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Scales the raw fitness scores to convert them into a more usable range of values. These scaled values are called expected values"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Selects members, called parents, based on their expectation"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Some of the individuals in the current population that have lower fitness are chosen as elite. These elite individuals are passed to the next population."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Produces children from the parents. Children are produced either by making random changes to a single parent - mutation - or by combining the vector entries of a pair of parents - crossover"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Replaces the current population with the children to form the next generation"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The algorithm stops when one of the stopping criteria is met."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The algorithm takes modified steps for linear and integer constraints."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The algorithm is further modified for nonlinear constraints."}]}]},{"type":"element","tag":"h3","props":{"id":"creating-the-next-generation"},"children":[{"type":"text","value":"Creating the Next Generation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"At each step, the genetic algorithm uses the current population to create the children that make up the next generation. The algorithm selects a group of individuals in the current population, called parents, who contribute their genes - the entries of their vectors - to their children. The algorithm usually selects individuals that have better fitness values as parents."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The genetic algorithm creates three types of children for the next generation:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Elite children are the individuals in the current generation with the best fitness values. These individuals automatically survive to the next generation."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Crossover children are created by combining the vectors of a pair of parents."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Mutation children are created by introducing random changes, or mutations, to a single parent."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"next generation","src":"multi-agents/next-gen.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"python-implementation"},"children":[{"type":"text","value":"Python Implementation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"WIP 🚧"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"creating-the-next-generation","depth":3,"text":"Creating the Next Generation"},{"id":"python-implementation","depth":2,"text":"Python Implementation"}]}},"_type":"markdown","_id":"content:multi-agents:2-genetic-algorithm.md","_source":"content","_file":"multi-agents/2-genetic-algorithm.md","_extension":"md"},{"_path":"/multi-agents/3-marl-policy-grad","_dir":"multi-agents","_draft":false,"_partial":false,"_locale":"","title":"3 Marl Policy Grad","description":"","body":{"type":"root","children":[],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:multi-agents:3-marl-policy-grad.md","_source":"content","_file":"multi-agents/3-marl-policy-grad.md","_extension":"md"},{"_path":"/multi-agents/4-marl-q-learning","_dir":"multi-agents","_draft":false,"_partial":false,"_locale":"","title":"4 Marl Q Learning","description":"","body":{"type":"root","children":[],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:multi-agents:4-marl-q-learning.md","_source":"content","_file":"multi-agents/4-marl-q-learning.md","_extension":"md"}]